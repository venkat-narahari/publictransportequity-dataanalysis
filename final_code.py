# -*- coding: utf-8 -*-
"""Final_Code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SyJOS8mAH4kuxeZYVG1ed7osMbbko_A_
"""

pip install folium 
pip install osmnx

import pandas as pd
from shapely.geometry import Polygon, Point
import json
import numpy as np
import osmnx as ox
import re
import seaborn as sns
import matplotlib.pyplot as plt
from geopy.geocoders import Nominatim
import folium
import requests
geolocator = Nominatim(user_agent="geoapiExercises")
sns.set(style = "darkgrid")

file_url = 'https://drive.google.com/uc?id=1dIZDFJGnWgaP6nueqwnTm2DD75kVSVYO'

response = requests.get(file_url)
data = json.loads(response.text)

print(data)
#data = json.load(open('/content/drive/MyDrive/Shared/CNST Project/COH_CENSUS_BLOCK_GROUP_DEMOGRAPHICS_2010_-_MIL.json'))

df = pd.DataFrame(data['features'])
df

df1 = pd.DataFrame(dict(df.geometry)).T
df1

df2 = pd.DataFrame(dict(df.properties)).T
df2

new_data = pd.concat((df2,df1) , axis=1)
new_data

new_data.columns

new_data.drop(columns=[ 'OBJECTID_1','BG_ID_1'],axis=1,inplace=True)

for x,y  in zip(new_data.x,new_data.y):
    try : 
        city.append(geolocator.reverse(str(x)+","+str(y)).raw['address'].get('city', ''))
        postcode.append(geolocator.reverse(str(x)+","+str(y)).raw['address'].get('postcode', ''))
    except :
        np.nan()

x = []
for i in range(new_data.coordinates.shape[0]):
    try : 
        points = Polygon(np.array(new_data.coordinates[i]).reshape((-1,2)))
        a = str(points.centroid)
        x.append(a)
    except:
        x.append('pass')
    
#

new_data['points'] = x

other = new_data[new_data.points == 'pass']

new_data =  new_data[new_data.points != 'pass']
new_data

new_data.columns

new_data.drop(columns=['ShapeSTArea','ShapeSTLength', 'type', 'coordinates'],axis=1,inplace=True)

new_data['x'] = new_data.points.apply(lambda x: re.findall(r"[-+]?(?:\d*\.*\d+)",x)[1])
new_data['y'] = new_data.points.apply(lambda x: re.findall(r"[-+]?(?:\d*\.*\d+)",x)[0])
new_data

new_data.drop(columns=['points','STATE','TRACT','BLKGRP'],inplace=True)

new_data.x = new_data.x.astype(dtype=float)
new_data.y = new_data.y.astype(dtype=float)

def count_amenity(points , tag):
    tags = {'amenity': tag} 
    df = ox.geometries_from_point(points, tags=tags, dist=8047)
    return df.shape[0]

res = []
for a in zip(new_data.x , new_data.y):
    try : 
        value = count_amenity(a,'restaurant')
        res.append(value)
    except:
        np.nan()

new_data['restaurant'] = res

new_data.to_csv('data_with_restaurant.csv')

new_data = pd.read_csv('data_with_restaurant.csv')

data = {'bus_station' : [],
'library'     : [],
'hospital'    : [],
'post_office' : []}

amenities = ['bus_station','library','hospital','post_office']
for b in amenities:
    for a in zip(new_data.x , new_data.y):
        try : 
            value = count_amenity(a,b)
            data[b].append(value) 
        except:
            np.nan()

data.keys()

data = pd.DataFrame(data,columns=data.keys())

data = pd.read_csv('Final_Data.csv')
data.head()

import requests


df= data
df_sorted = df.sort_values('restaurant', ascending=False)

df = df_sorted.head(100) 

geolocator = Nominatim(user_agent="my_geocoder")

def get_location(lat, lon):
    location = geolocator.reverse(f"{lat}, {lon}")
    return location.address


df['location'] = df.apply(lambda row: get_location(row['x'], row['y']), axis=1)

def extract_zipcode(address):
    zipcode_match = re.search(r'\b\d{5}(?:-\d{4})?\b', address)
    if zipcode_match:
        return zipcode_match.group()
    else:
        return None


df['ZIPCode'] = df['location'].apply(extract_zipcode)



file_url = 'https://drive.google.com/uc?id=1BhcaQYORKWz-0kGjmEi548W26skCOgYN'

response = requests.get(file_url)
data_zip = json.loads(response.text)

 
zipcode_counts = df['ZIPCode'].value_counts()

zip_fin = dict(zip(zipcode_counts.index.astype(str), zipcode_counts.values))


color_scale = folium.LinearColormap(['gray','green','yellow','orange','red'], 
                                    vmin=min(zip_fin.values()), 
                                    vmax=max(zip_fin.values()))


restaurant_map = folium.Map(location=[29.76, -95.37], zoom_start=10)

 

folium.GeoJson(
    data_zip,
    style_function=lambda feature: {
        'fillColor': color_scale(zip_fin.get(feature['properties']['Zip_Code'], 0)),
        'color': 'black',
        'weight': 1,
        'fillOpacity': 0.7
    },
    tooltip=folium.GeoJsonTooltip(fields=['Zip_Code'], 
                                   aliases=['Zip Code'], 
                                   labels=True, 
                                   sticky=False),
    highlight_function=lambda x: {'weight':3,'color':'black','fillOpacity':0.7},
    name='Houston ZIP Codes'
).add_to(restaurant_map)

color_scale.caption = 'Number of Restaurants per ZipCode'
restaurant_map.add_child(color_scale)

restaurant_map

df= data
df_sorted = df.sort_values('hospital', ascending=False)

df = df_sorted.head(100) 

geolocator = Nominatim(user_agent="my_geocoder")

def get_location(lat, lon):
    location = geolocator.reverse(f"{lat}, {lon}")
    return location.address


df['location'] = df.apply(lambda row: get_location(row['x'], row['y']), axis=1)

def extract_zipcode(address):
    zipcode_match = re.search(r'\b\d{5}(?:-\d{4})?\b', address)
    if zipcode_match:
        return zipcode_match.group()
    else:
        return None


df['ZIPCode'] = df['location'].apply(extract_zipcode)

 
zipcode_counts = df['ZIPCode'].value_counts()

zip_fin = dict(zip(zipcode_counts.index.astype(str), zipcode_counts.values))


color_scale = folium.LinearColormap(['gray','green','yellow','orange','red'], 
                                    vmin=min(zip_fin.values()), 
                                    vmax=max(zip_fin.values()))


hospital_map = folium.Map(location=[29.76, -95.37], zoom_start=10)

 

folium.GeoJson(
    data_zip,
    style_function=lambda feature: {
        'fillColor': color_scale(zip_fin.get(feature['properties']['Zip_Code'], 0)),
        'color': 'black',
        'weight': 1,
        'fillOpacity': 0.7
    },
    tooltip=folium.GeoJsonTooltip(fields=['Zip_Code'], 
                                   aliases=['Zip Code'], 
                                   labels=True, 
                                   sticky=False),
    highlight_function=lambda x: {'weight':3,'color':'black','fillOpacity':0.7},
    name='Houston ZIP Codes'
).add_to(hospital_map)

color_scale.caption = 'Number of Hospitals per ZipCode'
hospital_map.add_child(color_scale)

hospital_map

df= data
df_sorted = df.sort_values('bus_station', ascending=False)

df = df_sorted.head(100) 

geolocator = Nominatim(user_agent="my_geocoder")

def get_location(lat, lon):
    location = geolocator.reverse(f"{lat}, {lon}")
    return location.address


df['location'] = df.apply(lambda row: get_location(row['x'], row['y']), axis=1)

def extract_zipcode(address):
    zipcode_match = re.search(r'\b\d{5}(?:-\d{4})?\b', address)
    if zipcode_match:
        return zipcode_match.group()
    else:
        return None


df['ZIPCode'] = df['location'].apply(extract_zipcode)


 
zipcode_counts = df['ZIPCode'].value_counts()

zip_fin = dict(zip(zipcode_counts.index.astype(str), zipcode_counts.values))


color_scale = folium.LinearColormap(['gray','green','yellow','orange','red'], 
                                    vmin=min(zip_fin.values()), 
                                    vmax=max(zip_fin.values()))


bus_map = folium.Map(location=[29.76, -95.37], zoom_start=10)

 

folium.GeoJson(
    data_zip,
    style_function=lambda feature: {
        'fillColor': color_scale(zip_fin.get(feature['properties']['Zip_Code'], 0)),
        'color': 'black',
        'weight': 1,
        'fillOpacity': 0.7
    },
    tooltip=folium.GeoJsonTooltip(fields=['Zip_Code'], 
                                   aliases=['Zip Code'], 
                                   labels=True, 
                                   sticky=False),
    highlight_function=lambda x: {'weight':3,'color':'black','fillOpacity':0.7},
    name='Houston ZIP Codes'
).add_to(bus_map)

color_scale.caption = 'Number of Bus stations per ZipCode'
bus_map.add_child(color_scale)

bus_map

df= data
df_sorted = df.sort_values('library', ascending=False)

df = df_sorted.head(500) 

geolocator = Nominatim(user_agent="my_geocoder")

def get_location(lat, lon):
    location = geolocator.reverse(f"{lat}, {lon}")
    return location.address


df['location'] = df.apply(lambda row: get_location(row['x'], row['y']), axis=1)

def extract_zipcode(address):
    zipcode_match = re.search(r'\b\d{5}(?:-\d{4})?\b', address)
    if zipcode_match:
        return zipcode_match.group()
    else:
        return None


df['ZIPCode'] = df['location'].apply(extract_zipcode)


zipcode_counts = df['ZIPCode'].value_counts()

zip_fin = dict(zip(zipcode_counts.index.astype(str), zipcode_counts.values))


color_scale = folium.LinearColormap(['gray','green','yellow','orange','red'], 
                                    vmin=min(zip_fin.values()), 
                                    vmax=max(zip_fin.values()))


library_map = folium.Map(location=[29.76, -95.37], zoom_start=10)

 

folium.GeoJson(
    data_zip,
    style_function=lambda feature: {
        'fillColor': color_scale(zip_fin.get(feature['properties']['Zip_Code'], 0)),
        'color': 'black',
        'weight': 1,
        'fillOpacity': 0.7
    },
    tooltip=folium.GeoJsonTooltip(fields=['Zip_Code'], 
                                   aliases=['Zip Code'], 
                                   labels=True, 
                                   sticky=False),
    highlight_function=lambda x: {'weight':3,'color':'black','fillOpacity':0.7},
    name='Houston ZIP Codes'
).add_to(library_map)

color_scale.caption = 'Number of Libraries per ZipCode'
library_map.add_child(color_scale)

library_map

#areas with highest number of restaurants
df = data
df_sorted = df.sort_values('restaurant', ascending=False)

top_areas = df_sorted.head(10) 

geolocator = Nominatim(user_agent="my_geocoder")

def get_location(lat, lon):
    location = geolocator.reverse(f"{lat}, {lon}")
    return location.address


top_areas['location'] = top_areas.apply(lambda row: get_location(row['x'], row['y']), axis=1)

def extract_zipcode(address):
    zipcode_match = re.search(r'\b\d{5}(?:-\d{4})?\b', address)
    if zipcode_match:
        return zipcode_match.group()
    else:
        return None

top_areas['zipcode'] = top_areas['location'].apply(extract_zipcode)

pd.set_option('display.max_colwidth', None)  # To display the complete text in columns
center_lat, center_lon = top_areas.iloc[0]['x'], top_areas.iloc[0]['y']
map_restaurants = folium.Map(location=[center_lat, center_lon], zoom_start=13)

for index, row in top_areas.iterrows():
    lat, lon = row['x'], row['y']
    name = f"Area: {lat}, {lon}<br>Number of Restaurants: {row['restaurant']}"
    marker = folium.Marker([lat, lon], popup=name)
    marker.add_to(map_restaurants)


map_restaurants

#areas with lowest number of restaurants
df = data
df_sorted = df.sort_values('restaurant', ascending=False)

least_areas = df_sorted.tail(10) 

geolocator = Nominatim(user_agent="my_geocoder")

def get_location(lat, lon):
    location = geolocator.reverse(f"{lat}, {lon}")
    return location.address


least_areas['location'] = top_areas.apply(lambda row: get_location(row['x'], row['y']), axis=1)

def extract_zipcode(address):
    zipcode_match = re.search(r'\b\d{5}(?:-\d{4})?\b', address)
    if zipcode_match:
        return zipcode_match.group()
    else:
        return None

least_areas['zipcode'] = top_areas['location'].apply(extract_zipcode)

pd.set_option('display.max_colwidth', None)  # To display the complete text in columns


center_lat, center_lon = top_areas.iloc[0]['x'], top_areas.iloc[0]['y']
map_restaurants = folium.Map(location=[center_lat, center_lon], zoom_start=13)

for index, row in top_areas.iterrows():
    lat, lon = row['x'], row['y']
    name = f"Area: {lat}, {lon}<br>Number of Restaurants: {row['restaurant']}"
    marker = folium.Marker([lat, lon], popup=name)
    marker.add_to(map_restaurants)


map_restaurants

#areas with highest number of hospitals
df_sorted = df.sort_values('hospital', ascending=False)

top_areas = df_sorted.head(10) 
#least_areas = df_sorted.tail(10) 

geolocator = Nominatim(user_agent="my_geocoder")

def get_location(lat, lon):
    location = geolocator.reverse(f"{lat}, {lon}")
    return location.address


top_areas['location'] = top_areas.apply(lambda row: get_location(row['x'], row['y']), axis=1)

def extract_zipcode(address):
    zipcode_match = re.search(r'\b\d{5}(?:-\d{4})?\b', address)
    if zipcode_match:
        return zipcode_match.group()
    else:
        return None

top_areas['zipcode'] = top_areas['location'].apply(extract_zipcode)
pd.set_option('display.max_colwidth', None)  # To display the complete text in columns

center_lat, center_lon = top_areas.iloc[0]['x'], top_areas.iloc[0]['y']
map_hospitals = folium.Map(location=[center_lat, center_lon], zoom_start=13)

for index, row in top_areas.iterrows():
    lat, lon = row['x'], row['y']
    name = f"Area: {lat}, {lon}<br>Number of Hospitals: {row['hospital']}"
    marker = folium.Marker([lat, lon], popup=name)
    marker.add_to(map_hospitals)


map_hospitals

#areas with lowest number of hospitals
df_sorted = df.sort_values('hospital', ascending=False)

least_areas = df_sorted.tail(10) 

geolocator = Nominatim(user_agent="my_geocoder")

def get_location(lat, lon):
    location = geolocator.reverse(f"{lat}, {lon}")
    return location.address


least_areas['location'] = least_areas.apply(lambda row: get_location(row['x'], row['y']), axis=1)

def extract_zipcode(address):
    zipcode_match = re.search(r'\b\d{5}(?:-\d{4})?\b', address)
    if zipcode_match:
        return zipcode_match.group()
    else:
        return None

least_areas['zipcode'] = least_areas['location'].apply(extract_zipcode)
pd.set_option('display.max_colwidth', None)  # To display the complete text in columns


center_lat, center_lon = least_areas.iloc[0]['x'], least_areas.iloc[0]['y']
map_hospitals = folium.Map(location=[center_lat, center_lon], zoom_start=13)

for index, row in least_areas.iterrows():
    lat, lon = row['x'], row['y']
    name = f"Area: {lat}, {lon}<br>Number of Hospitals: {row['hospital']}"
    marker = folium.Marker([lat, lon], popup=name)
    marker.add_to(map_hospitals)


map_hospitals

#areas with highest number of bus stations

df_sorted = df.sort_values('bus_station', ascending=False)

top_areas = df_sorted.head(10) 
#least_areas = df_sorted.tail(10) 

geolocator = Nominatim(user_agent="my_geocoder")

def get_location(lat, lon):
    location = geolocator.reverse(f"{lat}, {lon}")
    return location.address


top_areas['location'] = top_areas.apply(lambda row: get_location(row['x'], row['y']), axis=1)

def extract_zipcode(address):
    zipcode_match = re.search(r'\b\d{5}(?:-\d{4})?\b', address)
    if zipcode_match:
        return zipcode_match.group()
    else:
        return None

top_areas['zipcode'] = top_areas['location'].apply(extract_zipcode)
pd.set_option('display.max_colwidth', None)  # To display the complete text in columns


center_lat, center_lon = top_areas.iloc[0]['x'], top_areas.iloc[0]['y']
map_bus = folium.Map(location=[center_lat, center_lon], zoom_start=13)

for index, row in top_areas.iterrows():
    lat, lon = row['x'], row['y']
    name = f"Area: {lat}, {lon}<br>Number of Bus stations: {row['bus_station']}"
    marker = folium.Marker([lat, lon], popup=name)
    marker.add_to(map_bus)


map_bus

#areas with lowest number of bus stations


df_sorted = df.sort_values('bus_station', ascending=False)

least_areas = df_sorted.tail(10) 

geolocator = Nominatim(user_agent="my_geocoder")

def get_location(lat, lon):
    location = geolocator.reverse(f"{lat}, {lon}")
    return location.address


least_areas['location'] = least_areas.apply(lambda row: get_location(row['x'], row['y']), axis=1)

def extract_zipcode(address):
    zipcode_match = re.search(r'\b\d{5}(?:-\d{4})?\b', address)
    if zipcode_match:
        return zipcode_match.group()
    else:
        return None

least_areas['zipcode'] = least_areas['location'].apply(extract_zipcode)
pd.set_option('display.max_colwidth', None)  # To display the complete text in columns

center_lat, center_lon = least_areas.iloc[0]['x'], least_areas.iloc[0]['y']
map_bus = folium.Map(location=[center_lat, center_lon], zoom_start=13)

for index, row in least_areas.iterrows():
    lat, lon = row['x'], row['y']
    name = f"Area: {lat}, {lon}<br>Number of Bus stations: {row['bus_station']}"
    marker = folium.Marker([lat, lon], popup=name)
    marker.add_to(map_bus)


map_bus

#areas with highest number of libraries

df_sorted = df.sort_values('library', ascending=False)

top_areas = df_sorted.head(10) 
#least_areas = df_sorted.tail(10) 

geolocator = Nominatim(user_agent="my_geocoder")

def get_location(lat, lon):
    location = geolocator.reverse(f"{lat}, {lon}")
    return location.address


top_areas['location'] = top_areas.apply(lambda row: get_location(row['x'], row['y']), axis=1)

def extract_zipcode(address):
    zipcode_match = re.search(r'\b\d{5}(?:-\d{4})?\b', address)
    if zipcode_match:
        return zipcode_match.group()
    else:
        return None

top_areas['zipcode'] = top_areas['location'].apply(extract_zipcode)
pd.set_option('display.max_colwidth', None)  # To display the complete text in columns

center_lat, center_lon = top_areas.iloc[0]['x'], top_areas.iloc[0]['y']
map_library = folium.Map(location=[center_lat, center_lon], zoom_start=13)

for index, row in top_areas.iterrows():
    lat, lon = row['x'], row['y']
    name = f"Area: {lat}, {lon}<br>Number of Libraries: {row['library']}"
    marker = folium.Marker([lat, lon], popup=name)
    marker.add_to(map_library)


map_library

#areas with lowest number of libraries

df_sorted = df.sort_values('library', ascending=False)

least_areas = df_sorted.tail(10) 

geolocator = Nominatim(user_agent="my_geocoder")

def get_location(lat, lon):
    location = geolocator.reverse(f"{lat}, {lon}")
    return location.address


least_areas['location'] = least_areas.apply(lambda row: get_location(row['x'], row['y']), axis=1)

def extract_zipcode(address):
    zipcode_match = re.search(r'\b\d{5}(?:-\d{4})?\b', address)
    if zipcode_match:
        return zipcode_match.group()
    else:
        return None

least_areas['zipcode'] = least_areas['location'].apply(extract_zipcode)
pd.set_option('display.max_colwidth', None)  # To display the complete text in columns

center_lat, center_lon = least_areas.iloc[0]['x'], least_areas.iloc[0]['y']
map_library = folium.Map(location=[center_lat, center_lon], zoom_start=13)

for index, row in least_areas.iterrows():
    lat, lon = row['x'], row['y']
    name = f"Area: {lat}, {lon}<br>Number of Libraries: {row['library']}"
    marker = folium.Marker([lat, lon], popup=name)
    marker.add_to(map_library)


map_library

data.SUM_HU100

data.drop(columns=['Unnamed: 0.1','Unnamed: 0'],axis=1,inplace=True)

data.head()

fdf = data[['OBJECTID',  'SUM_TotPop', 'SUM_TotHou', 'SUM_Vacant', 'BG_ID', 'Median_House_Value',
       'x', 'y', 'restaurant', 'bus_station', 'library', 'hospital',
       'post_office']]

fdf.head()

fdf['County'] = fdf.BG_ID.apply(lambda x : str(x)[2:5])

fdf.County.value_counts()

sns.barplot(x = fdf.SUM_TotPop / sum(fdf.SUM_TotPop) , y = fdf.County )
plt.show()

fdf.to_csv('comprsed.csv')

df = pd.read_csv('Final_Data.csv')

df.head()

df.drop(columns=['Unnamed: 0.1', 'Unnamed: 0'],inplace=True,index=1)

geolocator.reverse(str(df.x[0])+","+str(df.y[0])).raw['address'].get('city', '')

city= []
postcode = []

for x,y  in zip(df.x,df.y):
    try : 
        city.append(geolocator.reverse(str(x)+","+str(y)).raw['address'].get('city', ''))
        postcode.append(geolocator.reverse(str(x)+","+str(y)).raw['address'].get('postcode', ''))
    except :
        np.nan()

a = {'city': city,
    'postalcode': postcode}
a = pd.DataFrame(data=a,columns=a.keys())

data = pd.read_csv('comprsed.csv')
data = pd.concat([data,a],axis=1).drop(columns = 'Unnamed: 0',axis=1)

data.Median_House_Value.fillna(value= np.mean(data.Median_House_Value),inplace=True)

data.dropna(inplace=True)
data.SUM_TotPop.replace(0,df['SUM_TotPop'].mean(),inplace=True)
data.SUM_TotHou.replace(0,df['SUM_TotHou'].mean(),inplace=True)
data.SUM_Vacant.replace(0,df['SUM_Vacant'].mean(),inplace=True)

data.postalcode.fillna(method='ffill',inplace=True)
data.city.fillna(method='ffill',inplace=True)
data['Blk_grup'] = data.BG_ID.apply(lambda x : str(x)[-1])
data.Blk_grup = data.Blk_grup.astype('category')

plt.title('Population In The Cities Seperated with BLK_GRUP')
sns.barplot(y = data.SUM_TotPop/ data.SUM_TotPop.sum() , x = data.city , hue='Blk_grup',data=data)
plt.show()

fig, (ax1,ax2) = plt.subplots(nrows=1, ncols=2, figsize=(15, 5))
ax1.set_title('Restaurant In The County Available Based On House Value')
sns.scatterplot(x = data.County , y = data.restaurant , alpha= 0.5,hue='Median_House_Value',markers=True,legend=True,data=data,ax=ax1)
ax2.set_title('Restaurant In The County Available Based On Population')
sns.scatterplot(x = data.County , y = data.restaurant , alpha= 0.5,hue='SUM_TotPop',markers=True,legend=True,data=data,ax=ax2)
plt.show()

a = data.groupby('postalcode')[['SUM_TotPop', 'SUM_TotHou','restaurant', 'bus_station', 'library',
       'hospital', 'post_office','Median_House_Value']].sum()

a.reset_index(inplace=True)
a

fig, ax = plt.subplots()
ax = sns.scatterplot(x = a.SUM_TotPop,y = a.bus_station,hue='Median_House_Value',data=a )
for i in  range(1 ,133):
    plt.rcParams.update({'font.size': 5}) 
    plt.title("No Of Bus_Stations VS  Population Based on Earnings")
    plt.xlabel('Population')
    plt.ylabel('No Of Bus_Stations')
    ax.annotate(a.postalcode[i], (a.SUM_TotPop[i], a.bus_station[i]))

fig, ax = plt.subplots()
ax = sns.scatterplot(x = a.SUM_TotPop,y = a.hospital,hue='Median_House_Value',data=a )
for i in  range(1 ,133):
    plt.rcParams.update({'font.size': 5}) 
    plt.title("No Of Hospital VS  Population Based on Earnings With Zip Codes")
    plt.xlabel('Population')
    plt.ylabel('No Of hospital')
    ax.annotate(a.postalcode[i], (a.SUM_TotPop[i], a.hospital[i]))

fig, ax = plt.subplots()
ax = sns.scatterplot(x = a.SUM_TotPop,y = a.library,hue='Median_House_Value',data=a )
for i in  range(1 ,133):
    plt.rcParams.update({'font.size': 5}) 
    plt.title("No Of Library VS  Population Based on Earnings With Zip Codes")
    plt.xlabel('Population')
    plt.ylabel('No Of Library')
    ax.annotate(a.postalcode[i], (a.SUM_TotPop[i], a.library[i]))

fig, ax = plt.subplots()
ax = sns.scatterplot(x = a.SUM_TotPop,y = a.post_office,hue='Median_House_Value',data=a )
for i in  range(1 ,133):
    plt.rcParams.update({'font.size': 5}) 
    plt.title("No Of Post_Office VS  Population Based on Earnings With Zip Codes")
    plt.xlabel('Population')
    plt.ylabel('No Of Post_Office')
    ax.annotate(a.postalcode[i], (a.SUM_TotPop[i], a.post_office[i]))

plt.title("House_Value vs Population Separated on BLK_GRUP")
sns.scatterplot(x = a.SUM_TotPop,y=a.Median_House_Value,style= data.Blk_grup)
plt.show()

plt.title("House_Value vs Population, Total Amenities Available")
sns.scatterplot(x = a.SUM_TotPop,y=a.Median_House_Value,hue= sum([a.restaurant,a.bus_station,a.library,a.hospital]))
plt.show()











